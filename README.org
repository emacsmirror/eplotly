#+TITLE: eplotly manual

This minor mode allows Emacs users to create plots directly from elisp
files, without the need for external programs such as R or gnuplot.
It is a simple (and limited in scope) wrapper around [[https://plotly.com/][Plotly]].

The main workhorse is the ~simplolty~ function, which translates
a list list into a javascript element, then embed it into and HTML
file and opens it in a browser.

A few convenience functions such as ~dotchart~ and ~barchart~ are
provided in order to make the creation of such common graph easier.


* Installation


Place eplotly.el somewhere where Emacs can find it (i.e. it must
be in your load-path), then in .emacs write

(require 'eplotly)

From now on, whenever you are in an elisp file, just do
M-x eplotly-mode and you are able to use its plotting functions.


To make the plot creation faster (and to be able to create plots
when you are not connected to the Internet), we suggest to download
locally a copy of plotly.js and do the following:

1. Get plotly.js from https://plotly.com/javascript/getting-started/
   (see the "Download" paragraph) and store it somewere in
   your machine.
2. Set the variable *plotly-dir* equal to the path to the
   directory where you've downloaded the plotly.min.js file

   #+begin_src elisp
     (setq *plotly-dir* "/path/to/plotlyjs/")
   #+end_src


* Usage - simple plots

** Dotcharts

   You can plot a dotchart via the ~dotchart~ function as passing
   lists of 2 series of values (the first one for the x values and
   the second for the y values), e.g.

   #+begin_src elisp

     (dotchart
      '(((1 2 3 4)
         (10 11 12 13))))
   #+end_src

   Suppose we want to add a second series of dots:
   #+begin_src elisp

     (dotchart
      '(
        ((1 2 3 4)
         (10 11 12 13))

        ((1 2 3 4)
         (15 15 15 15))
        ))
   #+end_src

   For each series we can customize various parameters (these parameters try to
   follow the same names used in Plotly). If we want to plot a line that passes
   through the dots, we should pass the value "lines" to the key :mode:


   #+begin_src elisp

          (dotchart
           '(((1 2 3 4)
              (10 11 12 13)
             :mode "lines")))
   #+end_src
   

   To plot both dots and line, just use :mode "lines+markers":

   

   #+begin_src elisp

          (dotchart
           '(((1 2 3 4)
              (10 11 12 13)
             :mode "lines+markers")))
   #+end_src

   If you want to add some text on every dot:


   #+begin_src elisp

               (dotchart
                '(((1 2 3 4)
                   (10 11 12 13)
                  :mode "lines+markers"
                  :text '("A" "B" "C"))))
   #+end_src

  The following are some of the keys that you can use for each data seris:

  - :name :: name of the series
  - :size :: size of the dots; if a single number is passed, than it will be
    used for all dots; if a list of values is passed, those will be used as
    size for every single plot (in this case, make sure that you pass a size
    value for every single plot, i.e. the lenght of the :size list should be
    the same as the lenght of the x and y values).
  - :color :: like :size, you can pass a single value (either a color name or a
    string represening rgb values - see examples) tha will be used for all points
    or a series of colors, one for each point.
  - :symbol :: the symbol to be used to represent the dots.
    

  To set the title of the chart, you can set the keyword title (Nota Bene:
  this has to be set 'outside' the list of data series - please note the
  parenthesis in the following examples):
  
   #+begin_src elisp

     (dotchart
      '(((1 2 3) (3 3 3) :mode "markers"
         :size (20 30 40) :color "blue")
        ((1 2 3) (5 2 1) :mode "lines" :text '("A" "B" "C"))
        ((1 2 3) (5 5 8) :mode "lines+markers" :name "Team C" :size 20))
        :title "My first plots")
   #+end_src


  #+begin_src elisp

    (dotchart
     '(((1 2 3 4)
        (10 11 12 13)
        :size (10 20 30 30)
        :color ("rgb(93 164 214)" "rgb(255 144 14)"  "rgb(44 160 101)" "rgb(255 65 54)")
        :symbol  ("circle" "square" "diamond" "cross")))

     :title "Using Dotchart elisp function")
  #+end_src
   
** Barcharts

  To create barchart you need to pass lists of data for every series of bars.
  Each series should be composed of:

  - a first list of labels for each bar
  - a second list of values representing the height of each bar
  - (optional) name of the series (set via the :name key)

  Then - after the data series - we can also pass the following values:

  - :barmode :: if "stack" the bars are stacked
  - :title :: title of the chart


  #+begin_src elisp
    (barchart '((("giraffes" "orangutans" "monkeys")
             (20 14 23)
             :name "SF Zoo")
            (("giraffes" "orangutans" "monkeys")
             (12 18 29)
             :name "LA Zoo"))
          :barmode  "stack"
          :title "Simple Barcharts")
  #+end_src
  

  You can also add text to each bar via the :text keyword:

  #+begin_src elisp

    (barchart '((
                 ("Liam" "Sophie" "Jacob" "Mia" "William" "Olivia")
                 (8.0 8.0 12.0 12.0 13.0 20.0)
                 :text  ("4.17 below the mean" "4.17 below the mean" "0.17 below the mean" "0.17 below the mean" "0.83 above the mean" "7.83 above the mean"))
                ))
  #+end_src

  The angle of the tick marks can be rotated via the :tickangle parameter:

  #+begin_src elisp
    (barchart  '((("Liam" "Sophie" "Jacob" "Mia" "William" "Olivia")
              (8.0 8.0 12.0 12.0 13.0 20.0)
              :text  (8.0 8.0 12.0 12.0 13.0 20.0)))
           :tickangle -45)
  #+end_src


* More complex graphs

  The functions ~barchart~ and ~dotchart~ are wrappers around the function ~simplotly~
  which can be used to create more complicated plots and allows for additional
  fine tunings of those plots.


  This function accepts 2 arguments:
  1. the first is a series of one or more alists; each alist follows the structure
     of the javascript code used by plotly.js; heare are some example of its usage
      (please refer to the potly javascript documentation to see all the avaiable
      parameters - though it is not guaranteed that ~simplotly~ will accept
       all such parameters).
  2. a second (optional) alist of parameters determining the ~layout~ of the chart.
     

    #+begin_src elisp
      (simplotly
        '(
          ((x 1 2 3 4 5)
           (y . (1 6 3 6 1))
           (mode . "markers+text")
           (type . "scatter")
           (name .  "Team A")
           (text . ("A-1" "A-2" "A-3" "A-4" "A-5"))
           (textposition . "top center")
           (textfont . ((family . "Raleway, sans-serif")))
           (marker . ((size . 12))))

          ((x . (1.5 2.5 3.5 4.5 5.5))
           (y . (4 1 7 1 4))
           (mode . "markers+text")
           (type . "scatter")
           (name . "Team B")
           (text . ("B-a" "B-b" "B-c" "B-d" "B-e"))
           (textfont . ((family . "Times New Roman")))
           (textposition . "bottom center")
           (marker . (( size . 12 ))))
          )

        '((xaxis . ((
                     range . (-2 10 ))))
          (yaxis . ((range . (0 8))))
          (legend . ((y . 0.5)
                     (yref . "paper")
                     (font . (
                              (family . "Arial sans-serif")
                              (size . 20)
                              (color . "grey")
                              ))))
          (title . ((text . "Data Labels on the Plot"))))
        )
  #+end_src


 Create a basic barchart with ~simplotly~:

 #+begin_src elisp
   (simplotly (list '((x . ("giraffes" "orangutans" "monkeys"))
                   (y . (20 14 23))
                   (type . "bar")))
           '((title . "Barchart")))
 #+end_src

   Create a grouped barchart with ~simplotly~:

   #+begin_src elisp
     (simplotly (list '((x . ("giraffes" "orangutans" "monkeys"))
                   (y . (20 14 23))
                   (name . "SF Zoo")
                   (type . "bar")
                   )
                 '((x . ("giraffes" "orangutans" "monkeys"))
                   (y . (12 18 29))
                   (name . "LA Zoo")
                   (type . "bar"))
                 )
           '((barmode . "group"))
           )
   #+end_src

  Create a stacked barchart with ~simplotly~:

  #+begin_src elisp
    

;; stacked
(simplotly (list '((x . ("giraffes" "orangutans" "monkeys"))
                   (y . (20 14 23))
                   (name . "SF Zoo")
                   (type . "bar")
                   )
                 '((x . ("giraffes" "orangutans" "monkeys"))
                   (y . (12 18 29))
                   (name . "LA Zoo")
                   (type . "bar"))
                 )
           '((barmode . "stack")
             (autosize . "false")
             (width . 500)
             (height . 500)
             (title . ((text . "see"))))
           )
  #+end_src

  

  Create a scatter Plot with a Color Dimension

  #+begin_src elisp

    (simplotly
     '(((y . (5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5))
        (mode . "markers")
        (marker . ((size . 40)
                   (color . (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39))
                   )))))

  #+end_src


  Set up colors, symbol and other parameters for a dotchart:

  #+begin_src elisp
    (simplotly
      '(
        ((x 1 2 3 4)
         (y . (10 11 12 13))
         (mode . "markers")
         (type . "scatter")
         (marker . ((size . (40 60 80 100))
                    (color . ("rgb(93 164 214)" "rgb(255 144 14)"  "rgb(44 160 101)" "rgb(255 65 54)"))
                    (symbol . ("circle" "square" "diamond" "cross"))
                    )))))

  #+end_src


  
* Piechart

#+begin_src elisp
  (simplotly
      '(
        ((values  30 20 50)
         (labels . ("Residential" "Non-Residential" "Utility"))
         (type . "pie")
         )))
#+end_src



#+begin_src elisp
  (simplotly
      '(
        ((values  16 15 12 6 5 4 42)
         (labels . ("US" "China" "European Union" "Russian Federation"
                    "Brazil" "India" "Rest of World" ))
         (type . "pie")
         (hoverinfo . "label+percent+name")
         (hole . .4)
         (name . "GHG Emissions")
         )))
#+end_src

* Heatmap

  To build heatmap you need to pass an alist with car equal to 'z and cdr equal to a
  a nested list whish should follow these criteria:

  - each nested list contains the data of a row (first nested list represents
    the first row at the bottom of the heatmap, the last nested list represents
    the row at the top of the heatmap).
  - Each cell in each nested list represents a cell of the heatmap (cells
    are represented from left to right)

    I.e. to obtain the following heatmap

    
    | 1 |  2 |  3 |  4 |
    | 5 |  6 |  7 |  8 |
    | 9 | 10 | 11 | 12 |

    you should use the following nested list:

    '((9 10 11 12) (5 6 7 8) (1 2 3 4))

    
  #+begin_src elisp
    (simplotly
          '((
             (z . ((1 20 30 50 1) (20 1 60 80 30) (30 60 1 -10 20)))
             (x . ("Monday" "Tuesday" "Wednesday" "Thursday" "Friday"))
             (y . ("Morning" "Afternoon" "Evening"))
             (type . "heatmap"))
            ))


  #+end_src


  


* Histograms

 Vertical histograms, the data-series list must contain
 a nested list with car equal 'x

#+begin_src elisp
  (simplotly
   '(((x . (1 2 2 2 1 1 1 4 4 4))
      (type . "histogram"))))
#+end_src

  For horizontal histogram, use 'y instead of 'x for
  the car of the data-series list
  
#+begin_src elisp
  (simplotly
   '(((y . (1 2 2 2 1 1 1 4 4 4))
      (type . "histogram"))))
#+end_src

  For a stacked histogram, pass two or more series as a first argument,
  then, as a second argume (containing the layout settings) include
  an alist with values (barmode . "stack").
  
#+begin_src elisp
  (simplotly
   '(((x . (1 2 2 2 1 1 1 4 4 4))
      (type . "histogram"))
     ((x . (3 3 2  1 1 1 5 5 5 ))
      (type . "histogram")))
   '((barmode . "stack")))
#+end_src



* Boxplots


For vertical boxplots, pass alists with car equal to 'y:

#+begin_src elisp

  (simplotly
   '(((y . (1 2 2 2 1 1 1 4 4 4 10 -5))
      (type . "box"))
     ((y . (3 3 2  1 1 1 5 5 5 ))
      (type . "box"))))

#+end_src

For horizontal boxplots, use 'x instead of 'y in the data-series
nested list.

#+begin_src elisp

  (simplotly
   '(((x . (1 2 2 2 1 1 1 4 4 4 10 -5))
      (type . "box"))
     ((x . (3 3 2  1 1 1 5 5 5 ))
      (type . "box"))))

#+end_src

Let's create a plot similar to the one in Plotly-javascript tutorial

#+begin_src elisp
    (defun random-list(n upper-limit)
      "Convenience function to create a list
  of random numbers."
      (let*
          ((res '()))
        (dotimes (x n)
          (push (random upper-limit) res))
        (reverse res))
      )

    (simplotly
     `(((y . ,(random-list 30 10))
        (type . "box"))
       ((y . ,(random-list 30 11))
        (type . "box"))))

#+end_src

    To include underlaying dots, add:

    - (boxpoints . "all")
    - (jitter . 0.3)
    - (pointpos . -1.8)

      To the data series (of course these are just the same values
      used in the javascript tutorial, you are supposed to use the
      most appropriate values for your plot).

#+begin_src elisp

  (simplotly
   '(((y . (1 2 2 2 1 1 1 4 4 4 10 -5))

      (boxpoints . "all")
      (jitter . 0.3)
      (pointpos . -1.8)
      (type . "box"))
     ((y . (3 3 2  1 1 1 5 5 5 ))
      (type . "box"))))

#+end_src


Gropued boxplots: for each data series, pass both y values (the data
from which the box should be built) and x values (labels that represent
the group to which each y-value belongs to).

#+begin_src elisp
  (setq days
        '("day 1" "day 1" "day 1" "day 1" "day 1" "day 1"

           "day 2" "day 2" "day 2" "day 2" "day 2" "day 2"))


  (simplotly
   `((
      (y . [0.2 0.2 0.6 1.0 0.5 0.4 0.2 0.7 0.9 0.1 0.5 0.3])
      (x . ,days)
      (name . "kale")
      ;; marker: {color: "#3D9970"}
      (type . "box"))
     ((y . [0.6 0.7 0.3 0.6 0.0 0.5 0.7 0.9 0.5 0.8 0.7 0.2])
      (x . ,days)
      (name . "radishes")
      ;; marker: {color: "#FF4136"}
      (type . "box")
      )
     (
      (y . [0.1 0.3 0.1 0.9 0.6 0.6 0.9 1.0 0.3 0.6 0.8 0.5])
      (x . ,days)
      (name . "carrots")
      ;; marker: {color: "#FF851B"}
      (type . "box")))
   '((boxmode . "group")))

#+end_src


* Surface plots

 Pass an alist with car equal z and cdr a nested list of
 height values, and another one with car equal 'type
 and cdr equal "surface").

#+begin_src elisp
  (simplotly
   '((
      (z .    ((8.83 8.89 8.81 8.87 8.9 8.87) 
               (8.89 8.94 8.85 8.94 8.96 8.92) 
               (8.84 8.9 8.82 8.92 8.93 8.91) 
               (8.79 8.85 8.79 8.9 8.94 8.92) 
               (8.79 8.88 8.81 8.9 8.95 8.92) 
               (8.8 8.82 8.78 8.91 8.94 8.92) 
               (8.75 8.78 8.77 8.91 8.95 8.92) 
               (8.8 8.8 8.77 8.91 8.95 8.94) 
               (8.74 8.81 8.76 8.93 8.98 8.99) 
               (8.89 8.99 8.92 9.1 9.13 9.11) 
               (8.97 8.97 8.91 9.09 9.11 9.11) 
               (9.04 9.08 9.05 9.25 9.28 9.27) 
               (9 9.01 9 9.2 9.23 9.2) 
               (8.99 8.99 8.98 9.18 9.2 9.19) 
               (8.93 8.97 8.97 9.18 9.2 9.18)))
      (type . "surface"))))
#+end_src




* Subplots

  You need to pass a second argument to the simplotly function (an
  alist containing the layout parameters) where you need to set
  the number of rows and columns, i.e. something like the
  following will create a 2*2 grid of charts

   '(( grid .
       ((rows . 2)
        (columns . 2)
        (pattern .  "independent")))))

#+begin_src elisp
  (simplotly
   '((
      (  x . [1 2 3])
      (  y . [4 5 6])
      (type . "scatter"))
     ((x . [20 30 40])
      (y . [50 60 70])
      (xaxis . "x2")
      (yaxis . "y2")
      (type . "scatter"))
     (
      (x . [300 400 500])
      (y . [600 700 800])
      (xaxis . "x3")
      (yaxis . "y3")
      (type . "scatter"))
     (
      (x . [4000 5000 6000])
      (y . [7000 8000 9000])
      (xaxis . "x4")
      (yaxis . "y4")
      (type . "scatter")
      ))
   '(( grid .
       ((rows . 2)
        (columns . 2)
        (pattern .  "independent")))))
#+end_src
